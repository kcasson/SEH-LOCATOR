Imports System.Data
Imports cUtilities
Imports Web.UI.MiscControls
Imports System.Net

Partial Class Site_ItemUsedChangeOrder
    Inherits System.Web.UI.Page

    Private Enum searchTypes
        Commodity
        Expense
        Vendor
        Manufacturer
        Location
        Description
    End Enum

    Private Enum emailTypes
        Approval
        Notification
    End Enum
    Private Enum RequestStatuses
        Submitted
        Approved
        Disapproved
        PendingItemBuild
        Complete
    End Enum
    Private Property itemCount As Integer
        Get
            If (Not IsNothing(viewstate("itemCount"))) Then
                Return viewstate("itemCount")
            Else
                Return 0
            End If
        End Get
        Set(value As Integer)
            viewstate("itemCount") = value
        End Set
    End Property
    Private Property currentItemIndex As Integer
        Get
            If (Not IsNothing(ViewState("currentItemIndex"))) Then
                Return ViewState("currentItemIndex")
            Else
                Return 0
            End If
        End Get
        Set(value As Integer)
            ViewState("currentItemIndex") = value
        End Set
    End Property
    Private Property searchType As searchTypes
        Get
            If (Not IsNothing(viewstate("searchType"))) Then
                Return (viewstate("searchType"))
            Else
                Return searchTypes.Commodity
            End If

        End Get
        Set(value As searchTypes)
            viewstate("searchType") = value
        End Set
    End Property

    Private Property RequestNumber As Integer
        Get
            If (Not IsNothing(viewstate("RequestId"))) Then
                Return CInt(viewstate("RequestId"))
            Else
                Return 0
            End If

        End Get
        Set(value As Integer)
            viewstate("RequestId") = value
        End Set
    End Property

    Private Property dgEnabled As Boolean
        Get
            If (Not IsNothing(viewstate("dgEnabled"))) Then
                Return CBool(viewstate("dgEnabled"))
            Else
                Return True
            End If
        End Get
        Set(value As Boolean)
            viewstate("dgEnabled") = value
        End Set
    End Property
    Private Property itemCollection As DataTable
        Get
            If Not IsNothing(viewstate("itemCollection")) Then
                Return CType(viewstate("itemCollection"), DataTable)
            Else
                Dim dt As New DataTable
                dt.Columns.Add(New DataColumn("ItemNumber", GetType(String)))
                dt.Columns.Add(New DataColumn("ProductNumber", GetType(String)))
                dt.Columns.Add(New DataColumn("OrderUOM", GetType(String)))
                dt.Columns.Add(New DataColumn("ConversionQty", GetType(Double)))
                dt.Columns.Add(New DataColumn("DispensingUOM", GetType(String)))
                dt.Columns.Add(New DataColumn("Price", GetType(Double)))
                dt.Columns.Add(New DataColumn("Description", GetType(String)))
                dt.Columns.Add(New DataColumn("CommodityCode", GetType(String)))
                dt.Columns.Add(New DataColumn("ExpenseCode", GetType(String)))
                dt.Columns.Add(New DataColumn("Chargeable", GetType(Boolean)))
                dt.Columns.Add(New DataColumn("Implant", GetType(Boolean)))
                dt.Columns.Add(New DataColumn("InvoiceOnlyID", GetType(Integer)))
                dt.Columns.Add(New DataColumn("InvoiceOnlyLineID", GetType(Integer)))

                addItem(dt) 'add the first item
                viewstate("itemCollection") = dt
                Return dt

            End If
        End Get
        Set(value As DataTable)
            viewstate("itemCollection") = value
        End Set
    End Property
    Protected Sub Page_PreInit(sender As Object, e As System.EventArgs) Handles Me.PreInit
        'this header tag is required to override IE compatibility mode for intranet sites
        Response.AddHeader("X-UA-Compatible", "IE=8")
    End Sub

    Protected Sub Page_Load(sender As Object, e As System.EventArgs) Handles Me.Load
        'Verify user is authorized. 
        If Not cData.GetUserAuthorization(User.Identity.Name, "/ItemUsedChangeOrder.aspx") Then
            cData.LogPageHit("ItemsUsedChangeOrder.aspx", User.Identity.Name, 0, Server.MachineName, Request.ServerVariables("REMOTE_ADDR"))
            Server.Transfer("na.aspx?u=" & User.Identity.Name)
        End If

        If Not IsPostBack Then
            viewstate.Clear() 'Delete any previous requests
            Dim jscript As String = String.Empty
            dgItems.EditItemIndex = 0
            If Not IsNothing(Request.QueryString("reqId")) Then
                If Not loadExistingRequest(Request.QueryString("reqId")) Then
                    jscript = "alert('An error occurred while loading record " & Request.QueryString("reqId") & ", if data is present it's not reliable.');"
                End If
            Else
                lblNotify.Text = "(NEW)"
                'clear any previous requests
                'itemCollection.Rows.Clear()
                RequestNumber = 0
            End If
            'add the menu title for this page
            Dim hd As Web.UI.MiscControls.MenuHeadControl = CType(Page.Master.FindControl("MenuHead"), Web.UI.MiscControls.MenuHeadControl)
            hd.ImageText = "INVOICE ONLY - REQUISITIONS"
            lblHeader.Text = "ITEMS USED/CHANGE ORDER"
            dgItems.DataSource = itemCollection
            dgItems.DataBind()
            ScriptManager.RegisterStartupScript(Page, Page.GetType(), Guid.NewGuid().ToString(), _
            jscript & "setFocus('ctl00_ContentPlaceHolder1_dgItems_ctl01_txtItemNumber');", True)
        End If

    End Sub


    Private Function addItem(dt As DataTable) As DataTable
        Dim dr As DataRow
        dr = dt.NewRow
        dt.Rows.Add(dr)
        Return dt
    End Function


    'Code Search options
    Protected Sub btnCommoditySearch_Click(sender As Object, e As System.EventArgs) Handles btnCommoditySearch.Click
        dgCommodityCodes.CurrentPageIndex = 0
        dgCommodityCodes.DataSource = cData.GetCodes(UCase(txtCommoditySearch.Text), DirectCast(searchType, searchTypes).ToString)
        dgCommodityCodes.DataBind()
        'Register client to keep the search div visible on postback
        ScriptManager.RegisterStartupScript(Page, Page.GetType(), Guid.NewGuid().ToString(), _
                " document.getElementById('divCommoditySearch').setAttribute('class','sitePopout');centerDiv('divCommoditySearch');setFocus('ctl00_ContentPlaceHolder1_txtCommoditySearch')", True)

    End Sub


    Protected Sub dgCommodityCodes_ItemCommand(source As Object, e As System.Web.UI.WebControls.DataGridCommandEventArgs) Handles dgCommodityCodes.ItemCommand
        If e.CommandName = "RefCommodity" Then
            Dim txt As TextBox
            If (searchType = searchTypes.Commodity) Or (searchType = searchTypes.Expense) Or (searchType = searchTypes.Description) Then
                ' Add logic for addition operation here.
                For Each dli As DataListItem In dgItems.Items
                    If dli.ItemType = ListItemType.EditItem Then
                        txt = dli.FindControl("txt" & DirectCast(searchType, searchTypes).ToString & "Code")
                        txt.Text = CType(e.Item.Cells(0).Controls(0), LinkButton).Text
                    End If
                Next
            Else
                txt = Master.FindControl("ContentPlaceHolder1").FindControl("txt" & DirectCast(searchType, searchTypes).ToString)
                txt.Text = CType(e.Item.Cells(0).Controls(0), LinkButton).Text
            End If

            dgCommodityCodes.DataBind()
            txtCommoditySearch.Text = String.Empty
            ScriptManager.RegisterStartupScript(Page, Page.GetType(), Guid.NewGuid().ToString(), _
             "enableElement('ctl00_ContentPlaceHolder1_dgItems_ctl02_btnNewItem'); ", True)

        End If
    End Sub
    Protected Sub dgCommodityCodes_PageIndexChanged(source As Object, e As System.Web.UI.WebControls.DataGridPageChangedEventArgs) Handles dgCommodityCodes.PageIndexChanged
        dgCommodityCodes.CurrentPageIndex = e.NewPageIndex
        dgCommodityCodes.DataSource = cData.GetCodes(UCase(txtCommoditySearch.Text), DirectCast(searchType, searchTypes).ToString)
        dgCommodityCodes.DataBind()
        ScriptManager.RegisterStartupScript(Page, Page.GetType(), Guid.NewGuid().ToString(), _
            " document.getElementById('divCommoditySearch').setAttribute('class','sitePopout');centerDiv('divCommoditySearch');setFocus('ctl00_ContentPlaceHolder1_txtCommoditySearch')", True)

    End Sub

    'dgItems control functions
    Protected Sub NewItem_Click()
        saveItem() 'verify previously modified item is saved before adding new 
        dgItems.DataSource = addItem(itemCollection) 'add an item to the collection
        dgItems.EditItemIndex = (itemCollection.Rows.Count - 1)
        dgItems.DataBind()
        DisableEditDelete()
        ScriptManager.RegisterStartupScript(Page, Page.GetType(), Guid.NewGuid().ToString(), _
                    "setFocus('ctl00_ContentPlaceHolder1_dgItems_ctl01_txtItemNumber');", True)

    End Sub
    Protected Sub Delete_Command(sender As Object, e As DataListCommandEventArgs)
        'Delete the item
        itemCollection.Rows.RemoveAt(e.Item.ItemIndex)
        itemCount -= 1
        dgItems.DataSource = itemCollection
        dgItems.DataBind()


    End Sub
    Protected Sub Update_Command(sender As Object, e As DataListCommandEventArgs)
        saveItem()
        dgItems.EditItemIndex = -1
        dgItems.DataSource = itemCollection
        dgItems.DataBind()
        EnableEditDelete()
        ScriptManager.RegisterStartupScript(Page, Page.GetType, Guid.NewGuid.ToString, _
                                            "setFocus('ctl00_ContentPlaceHolder1_dgItems_ctl03_txtVendor');", True)
        If lblNotify.Text = "(PENDING ITEM BUILD)" Then
            ScriptManager.RegisterStartupScript(Page, Page.GetType(), Guid.NewGuid().ToString(), _
            " disableElement('ctl00_ContentPlaceHolder1_dgItems_ctl02_btnNewItem');", True)
        End If
    End Sub
    Protected Sub Edit_Command(sender As Object, e As DataListCommandEventArgs)
        saveItem()
        dgItems.EditItemIndex = e.Item.ItemIndex
        dgItems.DataSource = itemCollection
        dgItems.DataBind()
        DisableEditDelete()
        If lblNotify.Text = "(PENDING ITEM BUILD)" Then
            ScriptManager.RegisterStartupScript(Page, Page.GetType(), Guid.NewGuid().ToString(), _
            " disableElement('ctl00_ContentPlaceHolder1_dgItems_ctl02_btnNewItem');", True)
        End If

    End Sub

    Protected Sub dgItems_ItemCommand(source As Object, e As System.Web.UI.WebControls.DataListCommandEventArgs) Handles dgItems.ItemCommand
        Select Case e.CommandArgument
            Case "Commodity"
                searchType = searchTypes.Commodity
                lblSearchHeader.Text = "Commodity Code Search"
                lblSearchType.Text = "Commodity Code"
                ScriptManager.RegisterStartupScript(Page, Page.GetType(), Guid.NewGuid().ToString(), _
        " document.getElementById('divCommoditySearch').setAttribute('class','sitePopout');centerDiv('divCommoditySearch');disableElement('ctl00_ContentPlaceHolder1_dgItems_ctl02_btnNewItem');setFocus('ctl00_ContentPlaceHolder1_txtCommoditySearch');", True)

            Case "ExpenseCode"
                searchType = searchTypes.Expense
                lblSearchHeader.Text = "Expense Code Search"
                lblSearchType.Text = "Expense Code"
                ScriptManager.RegisterStartupScript(Page, Page.GetType(), Guid.NewGuid().ToString(), _
        " document.getElementById('divCommoditySearch').setAttribute('class','sitePopout');centerDiv('divCommoditySearch');disableElement('ctl00_ContentPlaceHolder1_dgItems_ctl02_btnNewItem');setFocus('ctl00_ContentPlaceHolder1_txtCommoditySearch');", True)

            Case "Description"
                searchType = searchTypes.Description
                lblSearchHeader.Text = "Item Description Search"
                lblSearchType.Text = "Description"
                ScriptManager.RegisterStartupScript(Page, Page.GetType(), Guid.NewGuid().ToString(), _
        " document.getElementById('divCommoditySearch').setAttribute('class','sitePopout');centerDiv('divCommoditySearch');disableElement('ctl00_ContentPlaceHolder1_dgItems_ctl02_btnNewItem');setFocus('ctl00_ContentPlaceHolder1_txtCommoditySearch');", True)

        End Select

    End Sub

    Protected Sub dgItems_ItemCreated(sender As Object, e As System.Web.UI.WebControls.DataListItemEventArgs) Handles dgItems.ItemCreated

        'Fill the row each time it is loaded regaurdless of the item type
        If (e.Item.ItemType = ListItemType.Item) Or (e.Item.ItemType = ListItemType.AlternatingItem) Or (e.Item.ItemType = ListItemType.EditItem) Then

            CType(e.Item.FindControl("txtItemNumber"), TextBox).Text = checkDBNull(itemCollection.Rows(e.Item.ItemIndex)("ItemNumber"))
            CType(e.Item.FindControl("txtProductNumber"), TextBox).Text = checkDBNull(itemCollection.Rows(e.Item.ItemIndex)("ProductNumber"))

            CType(e.Item.FindControl("txtConversionQty"), TextBox).Text = checkDBNull(itemCollection.Rows(e.Item.ItemIndex)("ConversionQty"))
            If checkDBNull(itemCollection.Rows(e.Item.ItemIndex)("DispensingUOM")) <> String.Empty Then
                CType(e.Item.FindControl("ddlDispensingUOM"), UOMDropDown).SelectedValue = checkDBNull(itemCollection.Rows(e.Item.ItemIndex)("DispensingUOM"))
            End If
            CType(e.Item.FindControl("txtPrice"), TextBox).Text = checkDBNull(itemCollection.Rows(e.Item.ItemIndex)("Price"))
            CType(e.Item.FindControl("txtDescriptionCode"), TextBox).Text = checkDBNull(itemCollection.Rows(e.Item.ItemIndex)("Description"))
            CType(e.Item.FindControl("txtCommodityCode"), TextBox).Text = checkDBNull(itemCollection.Rows(e.Item.ItemIndex)("CommodityCode"))
            CType(e.Item.FindControl("txtExpenseCode"), TextBox).Text = checkDBNull(itemCollection.Rows(e.Item.ItemIndex)("ExpenseCode"))
            CType(e.Item.FindControl("chkChargeable"), CheckBox).Checked = IIf(checkDBNull(itemCollection.Rows(e.Item.ItemIndex)("Chargeable")) = _
                                    String.Empty, False, checkDBNull(itemCollection.Rows(e.Item.ItemIndex)("Chargeable")))
            CType(e.Item.FindControl("chkImplant"), CheckBox).Checked = IIf(checkDBNull(itemCollection.Rows(e.Item.ItemIndex)("Implant")) = _
                                    String.Empty, False, checkDBNull(itemCollection.Rows(e.Item.ItemIndex)("Implant")))
            If (e.Item.ItemType = ListItemType.Item) Or (e.Item.ItemType = ListItemType.AlternatingItem) Then
                If dgEnabled = True Then
                    CType(e.Item.FindControl("btnEdit"), Button).Enabled = True
                    CType(e.Item.FindControl("btnDelete"), ImageButton).Enabled = True
                Else
                    CType(e.Item.FindControl("btnEdit"), Button).Enabled = False
                    CType(e.Item.FindControl("btnDelete"), ImageButton).Enabled = False
                End If

            End If
        End If
        If (e.Item.ItemType = ListItemType.Footer) Then
            If dgEnabled Then
                CType(e.Item.FindControl("btnNewItem"), Button).Enabled = True
            Else
                CType(e.Item.FindControl("btnNewItem"), Button).Enabled = False
            End If
        End If


    End Sub
    Protected Sub saveItem()
        Dim i As Integer = dgItems.EditItemIndex
        If (dgItems.EditItemIndex <> -1) And (itemCollection.Rows.Count <> 0) And (dgItems.Items.Count >= i) Then
            If CType(dgItems.Items(i).FindControl("txtProductNumber"), TextBox).Text <> String.Empty And _
                CType(dgItems.Items(i).FindControl("txtConversionQty"), TextBox).Text <> String.Empty And _
                CType(dgItems.Items(i).FindControl("txtPrice"), TextBox).Text <> String.Empty And _
                CType(dgItems.Items(i).FindControl("txtCommodityCode"), TextBox).Text <> String.Empty And _
                CType(dgItems.Items(i).FindControl("txtExpenseCode"), TextBox).Text <> String.Empty And _
                CType(dgItems.Items(i).FindControl("txtExpenseCode"), TextBox).Text <> String.Empty Then 'check the required fields

                'save the the record to the datatable
                itemCollection.Rows(i)("ItemNumber") = CType(dgItems.Items(i).FindControl("txtItemNumber"), TextBox).Text
                itemCollection.Rows(i)("ProductNumber") = CType(dgItems.Items(i).FindControl("txtProductNumber"), TextBox).Text
                itemCollection.Rows(i)("ConversionQty") = _
                    IIf(Not isNumeric(CType(dgItems.Items(i).FindControl("txtConversionQty"), TextBox).Text), 0, CType(dgItems.Items(i).FindControl("txtConversionQty"), TextBox).Text)
                itemCollection.Rows(i)("DispensingUOM") = CType(dgItems.Items(i).FindControl("ddlDispensingUOM"), DropDownList).SelectedValue
                itemCollection.Rows(dgItems.Items(i).ItemIndex)("Price") = _
                    IIf(Not isNumeric(CType(dgItems.Items(i).FindControl("txtPrice"), TextBox).Text), 0, CType(dgItems.Items(i).FindControl("txtPrice"), TextBox).Text)
                itemCollection.Rows(dgItems.Items(i).ItemIndex)("Description") = CType(dgItems.Items(i).FindControl("txtDescriptionCode"), TextBox).Text
                itemCollection.Rows(dgItems.Items(i).ItemIndex)("CommodityCode") = CType(dgItems.Items(i).FindControl("txtCommodityCode"), TextBox).Text
                itemCollection.Rows(dgItems.Items(i).ItemIndex)("ExpenseCode") = CType(dgItems.Items(i).FindControl("txtExpenseCode"), TextBox).Text
                itemCollection.Rows(dgItems.Items(i).ItemIndex)("Chargeable") = CType(dgItems.Items(i).FindControl("chkChargeable"), CheckBox).Checked
                itemCollection.Rows(dgItems.Items(i).ItemIndex)("Implant") = CType(dgItems.Items(i).FindControl("chkImplant"), CheckBox).Checked
                itemCount += 1
            End If
        End If
    End Sub

    Protected Sub DisableEditDelete()
        'Disable Edit/Delete buttons
        For Each d As DataListItem In dgItems.Items
            If (d.ItemType = ListItemType.AlternatingItem) Or (d.ItemType = ListItemType.Item) Then
                Dim btn As Button = d.FindControl("btnEdit")
                btn.Enabled = False
                Dim ib As ImageButton = d.FindControl("btnDelete")
                ib.ImageUrl = "~/Images/errorGrey.png"
                ib.Enabled = False
            End If
        Next
    End Sub

    Protected Sub EnableEditDelete()
        'Enable the edit/delete buttons
        For Each d As DataListItem In dgItems.Items
            If (d.ItemType = ListItemType.AlternatingItem) Or (d.ItemType = ListItemType.Item) Then
                Dim btn As Button = d.FindControl("btnEdit")
                btn.Enabled = True
                Dim ib As ImageButton = d.FindControl("btnDelete")
                ib.ImageUrl = "~/Images/error.ico"
                ib.Enabled = True
            End If
        Next
    End Sub
    Protected Sub DisableForm()
        dgEnabled = False
        txtCartNumber.Enabled = False
        txtCommoditySearch.Enabled = False
        txtContact.Enabled = False
        txtItemLog.Enabled = False
        txtLocation.Enabled = False
        txtManufacturer.Enabled = False
        txtPhone.Enabled = False
        txtPO.Enabled = False
        txtVendor.Enabled = False
        imgLocation.Visible = False
        imgManufacturer.Visible = False
        imgVendor.Visible = False
        txtPatientName.Enabled = False
        txtDoctor.Enabled = False
        txtCaseNumber.Enabled = False
        txtSurgeryDate.Enabled = False
        rbConsignment.Enabled = False
        btnSubmitForm.Enabled = False
        spCalendar.Visible = False


    End Sub
    Protected Sub EnableForm()
        dgEnabled = True
        txtCartNumber.Enabled = True
        txtCommoditySearch.Enabled = True
        txtContact.Enabled = True
        txtItemLog.Enabled = True
        txtLocation.Enabled = True
        txtManufacturer.Enabled = True
        txtPhone.Enabled = True
        txtPO.Enabled = True
        txtVendor.Enabled = True
        imgLocation.Enabled = True
        imgManufacturer.Enabled = True
        imgVendor.Enabled = True
        txtPatientName.Enabled = True
        txtDoctor.Enabled = True
        txtCaseNumber.Enabled = True
        txtSurgeryDate.Enabled = True
        rbConsignment.Enabled = True
        btnSubmitForm.Enabled = True
        spCalendar.Visible = True
    End Sub

    'Submit form all items
    Protected Sub btnSubmitForm_Click(sender As Object, e As System.EventArgs) Handles btnSubmitForm.Click
        If lblRequestNumber.Text = String.Empty Then
            saveItem() 'make sure any pending items are saved
            If itemCount > 0 Then 'verify user has entered items
                'Save the header
                Try
                    Dim id As Integer = cData.AlterInvoiceOnly("", _
                       txtPO.Text, _
                       txtVendor.Text, _
                       txtManufacturer.Text, _
                        txtLocation.Text, _
                     txtItemLog.Text, _
                      rbConsignment.SelectedValue, _
                    txtCartNumber.Text, _
                    txtContact.Text, _
                     txtPhone.Text, _
                      User.Identity.Name.ToString, _
                        0, _
                          Convert.DBNull, _
                           txtPatientName.Text, _
                           txtDoctor.Text, _
                            txtSurgeryDate.Text, _
                             txtCaseNumber.Text)

                    'Save the detail records
                    For Each dr As DataRow In itemCollection.Rows
                        cData.AlterInvoiceOnlyLines("", _
                            id, _
                            dr("ItemNumber"), _
                            dr("ProductNumber"), _
                            dr("ConversionQty"), _
                            dr("DispensingUOM"), _
                            dr("Price"), _
                            dr("Description"), _
                            dr("CommodityCode"), _
                            dr("ExpenseCode"), _
                            dr("Chargeable"), _
                            dr("Implant"))

                    Next
                    lblRequestNumber.Text = "Request Number: " & CStr(id)
                    DisableForm()
                    generateUserEmail(emailTypes.Approval, id)
                    'successful save notify user
                    ScriptManager.RegisterStartupScript(Page, Page.GetType(), Guid.NewGuid().ToString(), _
                " alert('Request #" & id & " has been created!');", True)
                    Response.Redirect("http://" & Request.Url.Authority & Request.Path & "?reqId=" & CStr(id))
                Catch ex As Exception
                    ScriptManager.RegisterStartupScript(Page, Page.GetType(), Guid.NewGuid().ToString(), _
                " alert('Error has occurred: " & ex.Message & "');", True)
                End Try


            Else
                ScriptManager.RegisterStartupScript(Page, Page.GetType(), Guid.NewGuid().ToString(), _
                " alert('Please add an item before submitting this form!');", True)

            End If
        End If
    End Sub

    Protected Function loadExistingRequest(RequestId As String) As Boolean
        RequestNumber = RequestId
        Dim rtn As Boolean = False
        Try

            'delete existing items from collection and reset the items
            itemCollection.Rows.Clear()
            dgItems.EditItemIndex = -1


            Dim ds As DataSet = cData.GetInvoiceOnlyRequest(RequestId)
            If ds.Tables(0).Rows.Count > 0 Then
                DisableForm()
                'load header
                lblRequestNumber.Text = "Request Number: " & ds.Tables(0).Rows(0)("InvoiceOnlyId")
                txtPO.Text = ds.Tables(0).Rows(0)("PONumber")
                txtVendor.Text = ds.Tables(0).Rows(0)("Vendor")
                txtManufacturer.Text = ds.Tables(0).Rows(0)("Manufacturer")

                txtLocation.Text = ds.Tables(0).Rows(0)("Location")
                txtCartNumber.Text = ds.Tables(0).Rows(0)("CartNumber")
                rbConsignment.SelectedValue = IIf(ds.Tables(0).Rows(0)("IsConsignment") = False, 0, 1)
                txtContact.Text = ds.Tables(0).Rows(0)("SalesRepContact")
                txtPhone.Text = ds.Tables(0).Rows(0)("Phone")
                Select Case ds.Tables(0).Rows(0)("Status")
                    Case RequestStatuses.Submitted 'Status is submitted, awaiting approval
                        lblNotify.Text = "(This request has not been approved)"
                        If (cData.GetInvoiceOnlyNotify("Approver").Tables(0).Select("USER_ID = '" & User.Identity.Name & "'").Count >= 1) Then 'only show approval buttons if user is authorized
                            trApprovals.Attributes.Item("class") = ""
                        End If
                        trSubmit.Attributes.Item("class") = "noDisplay"
                        trCompletion.Attributes.Item("class") = "noDisplay"
                    Case RequestStatuses.Approved 'Status is Appoved, awaiting completion
                        lblNotify.Text = "(APPROVED FOR COMPLETION)"
                        If (cData.GetInvoiceOnlyNotify("Notify").Tables(0).Select("USER_ID = '" & User.Identity.Name & "'").Count >= 1) Then 'only show approval buttons if user is authorized
                            trCompletion.Attributes.Item("class") = ""
                        End If
                        trSubmit.Attributes.Item("class") = "noDisplay"
                        trApprovals.Attributes.Item("class") = "noDisplay"
                        txtPO.Enabled = True
                        ScriptManager.RegisterStartupScript(Page, Page.GetType(), Guid.NewGuid().ToString(), _
                        " setFocus('ctl00_ContentPlaceHolder1_txtPO');", True)
                        dgEnabled = True
                    Case RequestStatuses.Disapproved
                        lblNotify.Text = "(REQUEST DENIED)"
                        trSubmit.Attributes.Item("class") = "noDisplay"
                        trApprovals.Attributes.Item("class") = "noDisplay"
                        trCompletion.Attributes.Item("class") = "noDisplay"
                        dgEnabled = False
                    Case RequestStatuses.PendingItemBuild
                        lblNotify.Text = "(PENDING ITEM BUILD)"
                        If (cData.GetInvoiceOnlyNotify("ItemBuilder").Tables(0).Select("USER_ID = '" & User.Identity.Name & "'").Count >= 1) Then 'only show approval buttons if user is authorized
                            trUpdateItem.Attributes.Item("class") = ""
                        End If
                        trApprovals.Attributes.Item("class") = "noDisplay"
                        trCompletion.Attributes.Item("class") = "noDisplay"
                        trSubmit.Attributes.Item("class") = "noDisplay"
                        dgEnabled = True
                        ScriptManager.RegisterStartupScript(Page, Page.GetType(), Guid.NewGuid().ToString(), _
                            " disableElement('ctl00_ContentPlaceHolder1_dgItems_ctl02_btnNewItem');", True)

                    Case RequestStatuses.Complete
                        lblNotify.Text = "(COMPLETE)"
                        trSubmit.Attributes.Item("class") = "noDisplay"
                        trApprovals.Attributes.Item("class") = "noDisplay"
                        trCompletion.Attributes.Item("class") = "noDisplay"
                        dgEnabled = False
                End Select
                tdPrint.Attributes.Item("class") = String.Empty
                txtPatientName.Text = ds.Tables(0).Rows(0)("PatientName")
                txtDoctor.Text = ds.Tables(0).Rows(0)("DoctorName")
                txtSurgeryDate.Text = ds.Tables(0).Rows(0)("SurgeryDate")
                txtCaseNumber.Text = ds.Tables(0).Rows(0)("CaseNumber")

                If ds.Tables(1).Rows.Count > 0 Then
                    'load items
                    For Each dr As DataRow In ds.Tables(1).Rows
                        Dim newRow As DataRow = itemCollection.NewRow
                        newRow("ItemNumber") = dr("ItemNumber")
                        newRow("ProductNumber") = dr("ProductNumber")
                        newRow("ConversionQty") = dr("Qty")
                        newRow("DispensingUOM") = dr("DispensingUOM")
                        newRow("Price") = dr("Price")
                        newRow("Description") = dr("Description")
                        newRow("CommodityCode") = dr("CommodityCode")
                        newRow("ExpenseCode") = dr("ExpenseCode")
                        newRow("Chargeable") = dr("isChargeable")
                        newRow("Implant") = dr("isImplant")
                        newRow("InvoiceOnlyID") = dr("InvoiceOnlyID")
                        newRow("InvoiceOnlyLineID") = dr("InvoiceOnlyLineID")
                        itemCollection.Rows.Add(newRow)
                    Next


                    rtn = True
                End If
            End If

        Catch ex As Exception
            rtn = False
        End Try
        Return rtn

    End Function

    Protected Sub imgVendor_Click(sender As Object, e As System.Web.UI.ImageClickEventArgs) Handles imgVendor.Click
        searchType = searchTypes.Vendor
        lblSearchHeader.Text = "Vendor Search"
        lblSearchType.Text = "Vendor"
        ScriptManager.RegisterStartupScript(Page, Page.GetType(), Guid.NewGuid().ToString(), _
        " document.getElementById('divCommoditySearch').setAttribute('class','sitePopout');centerDiv('divCommoditySearch');disableElement('ctl00_ContentPlaceHolder1_dgItems_ctl02_btnNewItem');setFocus('ctl00_ContentPlaceHolder1_txtCommoditySearch');", True)


    End Sub

    Protected Sub imgManufacturer_Click(sender As Object, e As System.Web.UI.ImageClickEventArgs) Handles imgManufacturer.Click
        searchType = searchTypes.Manufacturer
        lblSearchHeader.Text = "Manufacturer Search"
        lblSearchType.Text = "Manufacturer"
        ScriptManager.RegisterStartupScript(Page, Page.GetType(), Guid.NewGuid().ToString(), _
        " document.getElementById('divCommoditySearch').setAttribute('class','sitePopout');centerDiv('divCommoditySearch');disableElement('ctl00_ContentPlaceHolder1_dgItems_ctl02_btnNewItem');setFocus('ctl00_ContentPlaceHolder1_txtCommoditySearch');", True)

    End Sub

    Protected Sub imgLocation_Click(sender As Object, e As System.Web.UI.ImageClickEventArgs) Handles imgLocation.Click
        searchType = searchTypes.Location
        lblSearchHeader.Text = "Location (Expense Code) Search"
        lblSearchType.Text = "Location"
        ScriptManager.RegisterStartupScript(Page, Page.GetType(), Guid.NewGuid().ToString(), _
        " document.getElementById('divCommoditySearch').setAttribute('class','sitePopout');centerDiv('divCommoditySearch');disableElement('ctl00_ContentPlaceHolder1_dgItems_ctl02_btnNewItem');setFocus('ctl00_ContentPlaceHolder1_txtCommoditySearch');", True)

    End Sub
    Private Sub updateRequestStatus(status As RequestStatuses, Optional PONumber As String = "")
        Dim strSql As String = String.Empty
        If PONumber <> String.Empty Then
            strSql = _
                "update InvoiceOnly " & _
                "set Status = " & status & _
                " ,PONumber = '" & PONumber & "'" & _
                " ,UpdatedBy = '" & User.Identity.Name & "'" & _
                " ,UpdatedDate = '" & Now & "'" & _
                " where InvoiceOnlyID = " & RequestNumber
        Else
            strSql = _
            "update InvoiceOnly " & _
            "set Status = " & status & _
            " ,UpdatedBy = '" & User.Identity.Name & "'" & _
            " ,UpdatedDate = '" & Now & "'" & _
            " where InvoiceOnlyID = " & RequestNumber
        End If

        Try
            cData.ExecuteSQLSupportNonQuery(strSql)
        Catch ex As Exception
            LogEvent(ex.Message, Diagnostics.EventLogEntryType.Error, 500001)
            ScriptManager.RegisterStartupScript(Page, Page.GetType(), Guid.NewGuid().ToString(), _
        " alert('Error occurred on update!');", True)
        End Try
    End Sub

    Private Sub generateUserEmail(type As emailTypes, requestId As Integer)
        Select Case type
            Case Is = emailTypes.Approval
                Dim sb As New StringBuilder
                sb.Append("<table>")
                sb.Append("<tr><td><b>A request has been created that requires approval. Please click the following link to approve:</b></td></tr>")
                sb.Append("<tr><td><a href='http://" & Request.Url.Authority & Request.Path & "?reqId=" & requestId & "'>Invoice Only Request Number " & requestId & "</a></td></tr>")
                sb.Append("</table>")

                Dim ds As DataSet = cData.GetInvoiceOnlyNotify("Approver")

                For Each dr As DataRow In ds.Tables(0).Rows
                    cUtilities.SendEmail(New Mail.MailAddress(dr("UserEmail")), New Mail.MailAddress("pmm@stelizabeth.com"), "Invoice Only Request #" & requestId & " needs to be approved.", sb.ToString)
                Next

        End Select


    End Sub

    Protected Sub btnApprove_Click(sender As Object, e As System.EventArgs) Handles btnApprove.Click
        If (cData.GetInvoiceOnlyNotify("Approver").Tables(0).Select("USER_ID = '" & User.Identity.Name & "'").Count >= 1) Then
            If RequestNumber <> 0 Then

                'send a notification email to the proper individuals
                Dim needsItemBuild As Boolean = False
                For Each dr As DataRow In itemCollection.Rows
                    If dr("itemNumber") = String.Empty Then
                        needsItemBuild = True
                        Exit For
                    End If
                Next
                Dim stat As RequestStatuses
                If needsItemBuild Then
                    'create notification
                    Dim sb As New StringBuilder
                    sb.Append("<table>")
                    sb.Append("<tr><td><b>A request has been created that requires item build(s). Please click the following link to for the information:</b></td></tr>")
                    sb.Append("<tr><td><a href='http://" & Request.Url.Authority & Request.Path & "?reqId=" & RequestNumber & "'>Invoice Only Request Number " & RequestNumber & "</a></td></tr>")
                    sb.Append("</table>")
                    Dim ds As DataSet = cData.GetInvoiceOnlyNotify("ItemBuilder")
                    For Each dr As DataRow In ds.Tables(0).Rows
                        cUtilities.SendEmail(New Mail.MailAddress(dr("UserEmail")), New Mail.MailAddress("pmm@stelizabeth.com"), "Invoice Only Request #" & RequestNumber & " needs item build(s).", sb.ToString)
                    Next
                    stat = RequestStatuses.PendingItemBuild 'item(s) need to be built
                Else
                    Dim sb As New StringBuilder
                    sb.Append("<table>")
                    sb.Append("<tr><td><b>An invoice only request has been submitted. Please click the following link to for the information:</b></td></tr>")
                    sb.Append("<tr><td><a href='http://" & Request.Url.Authority & Request.Path & "?reqId=" & RequestNumber & "'>Invoice Only Request Number " & RequestNumber & "</a></td></tr>")
                    sb.Append("</table>")
                    Dim ds As DataSet = cData.GetInvoiceOnlyNotify("Notify")
                    For Each dr As DataRow In ds.Tables(0).Rows
                        cUtilities.SendEmail(New Mail.MailAddress(dr("UserEmail")), New Mail.MailAddress("pmm@stelizabeth.com"), "Invoice Only Request #" & RequestNumber & ".", sb.ToString)
                    Next
                    stat = RequestStatuses.Approved 'approved, pending completion
                End If
                'update the record status
                updateRequestStatus(stat)
                'Reload form for new status
                Response.Redirect("http://" & Request.Url.Authority & Request.Path & "?reqId=" & RequestNumber)
            End If


        End If

    End Sub

    Protected Sub btnReject_Click(sender As Object, e As System.EventArgs) Handles btnReject.Click
        'update the record status to rejected
        updateRequestStatus(RequestStatuses.Disapproved)
        'Reload form for new status
        Response.Redirect("http://" & Request.Url.Authority & Request.Path & "?reqId=" & RequestNumber)
        'should we notify the user or someone else here?
    End Sub

    Protected Sub btnComplete_Click(sender As Object, e As System.EventArgs) Handles btnComplete.Click

        updateRequestStatus(RequestStatuses.Complete, txtPO.Text)
        'Reload form for new status
        Response.Redirect("http://" & Request.Url.Authority & Request.Path & "?reqId=" & RequestNumber)


    End Sub

    Protected Sub btnUpdateItemInfo_Click(sender As Object, e As System.EventArgs) Handles btnUpdateItemInfo.Click
        If RequestNumber <> 0 Then
            If dgItems.EditItemIndex <> -1 Then
                saveItem()
            End If
            'verify all pmm numbers exist prior to update
            Dim itemsExist As Boolean = True
            For Each dr As DataRow In itemCollection.Rows
                If checkDBNull(dr("ItemNumber")) = String.Empty Then
                    itemsExist = False
                End If
            Next
            If itemsExist Then
                'Save the detail records
                For Each dr As DataRow In itemCollection.Rows
                    Try
                        cData.AlterInvoiceOnlyLines(dr("InvoiceOnlyLineID"), _
                            RequestNumber, _
                            dr("ItemNumber"), _
                            dr("ProductNumber"), _
                              dr("ConversionQty"), _
                            dr("DispensingUOM"), _
                            dr("Price"), _
                            dr("Description"), _
                            dr("CommodityCode"), _
                            dr("ExpenseCode"), _
                            dr("Chargeable"), _
                            dr("Implant"))
                    Catch ex As Exception
                        LogEvent(ex.Message, Diagnostics.EventLogEntryType.Error, 500001)
                        ScriptManager.RegisterStartupScript(Page, Page.GetType(), Guid.NewGuid().ToString(), _
                    " alert('Error occurred on update!');", True)
                    End Try
                Next
                updateRequestStatus(RequestStatuses.Approved)
                Dim sb As New StringBuilder
                sb.Append("<table>")
                sb.Append("<tr><td><b>An invoice only request has been submitted. Please click the following link to for the information:</b></td></tr>")
                sb.Append("<tr><td><a href='http://" & Request.Url.Authority & Request.Path & "?reqId=" & RequestNumber & "'>Invoice Only Request Number " & RequestNumber & "</a></td></tr>")
                sb.Append("</table>")
                Dim ds As DataSet = cData.GetInvoiceOnlyNotify("Notify")
                For Each dr As DataRow In ds.Tables(0).Rows
                    cUtilities.SendEmail(New Mail.MailAddress(dr("UserEmail")), New Mail.MailAddress("pmm@stelizabeth.com"), "Invoice Only Request #" & RequestNumber & ".", sb.ToString)
                Next
                'Reload form for new status
                Response.Redirect("http://" & Request.Url.Authority & Request.Path & "?reqId=" & RequestNumber)
            Else
                ScriptManager.RegisterStartupScript(Page, Page.GetType(), Guid.NewGuid().ToString(), _
                " alert('Please add all item numbers before proceeding to update this request!');", True)
            End If


        End If

    End Sub

    Protected Sub imgClose_Click(sender As Object, e As System.Web.UI.ImageClickEventArgs) Handles imgClose.Click
        dgCommodityCodes.CurrentPageIndex = 0
        dgCommodityCodes.DataBind()
        txtCommoditySearch.Text = String.Empty
    End Sub

    Protected Sub txtCaseNumber_TextChanged(sender As Object, e As System.EventArgs) Handles txtCaseNumber.TextChanged

        Try 'This is an async postback to determine if this case and vendor combo already exists. If so, notify user of that fact.
            Dim strSQL As String = "select InvoiceOnlyID from InvoiceOnly where CaseNumber = '" & txtCaseNumber.Text & "' and Vendor = '" & txtVendor.Text & "';"
            Dim caseId As Integer = cData.ExecuteSQLScaler(strSQL)
            If caseId > 0 Then
                ScriptManager.RegisterStartupScript(Page, Page.GetType(), Guid.NewGuid().ToString(), _
                    " alert('Case number " & txtCaseNumber.Text & " already exists on request #" & caseId & ", please verify this request has not already been entered!');", True)
                txtCaseNumber.Text = String.Empty
                txtCaseNumber.Focus()
            End If
        Catch ex As Exception
            Throw New System.Exception(ex.Message)
        End Try








    End Sub
End Class

